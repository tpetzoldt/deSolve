\name{plot.deSolve}
\alias{plot.deSolve}
\alias{plot.1D}
\alias{hist.deSolve}
\alias{image.deSolve}
\title{
 Plot, Image and Histogram Method for deSolve Objects
}
\description{
Plot the output of numeric integration routines.
}
\usage{
\method{plot}{deSolve}(x, ..., which = NULL, ask = NULL, obs = NULL, 
  obspar= list())
\method{hist}{deSolve}(x, which = 1:(ncol(x)-1), ask = NULL, ...)
\method{image}{deSolve}(x, which = NULL, ask = NULL, 
  add.contour = FALSE, grid = NULL, method="image", ...)  
plot.1D (x, which=NULL, ask=NULL, grid=NULL, xyswap = FALSE, ...) 

}

\arguments{
  \item{x }{an object of class \code{deSolve}, as returned by the
    integrators, and to be plotted.
    
    
    For \code{plot.deSolve}, it is allowed to pass several objects of class
    \code{deSolve} after \code{x} (unnamed) - see second example.
    }

  \item{which }{the name(s) or the index to the variables that should be
    plotted.  Default = all variables, except \code{time}. }

  \item{ask }{logical; if \code{TRUE}, the user is \emph{ask}ed before
    each plot, if \code{NULL} the user is only asked if more than one
    page of plots is necessary and the current graphics device is set
    interactive, see \code{\link{par}(ask=.)} and
    \code{\link{dev.interactive}}.}
  
  \item{add.contour }{if \code{TRUE}, will add contours to the image plot.}

  \item{method }{the name of the plotting method to use, one of "image", 
    "filled.contour", "persp", "contour".}

  \item{grid }{only for \code{image} plots and for \code{plot.1D}: 
    the 1-D grid as a vector (output generated with \code{ode.1D}, 
    or the x- and y-grid, as a \code{list} for output generated with 
    \code{ode.2D}.}

  \item{xyswap }{ if \code{TRUE}, then x-and y-values are swapped and the 
    y-axis is from top to bottom. Useful for drawing vertical profiles.}

  \item{obs }{a \code{data.frame} or \code{matrix} with "observed data" that 
    will be added as \code{points} to the plots. 
    The first column of \code{obs} should contain the \code{time}-variable. 
    If \code{obs} is not \code{NULL} and \code{which} is \code{NULL}, 
    then the variables, common to both \code{obs} and \code{x} will be plotted.
  }
  \item{obspar }{additional graphics arguments passed to \code{points}, for 
    plotting the observed data
  }
  \item{\dots}{additional arguments.
  
    The graphical arguments are passed to
    \code{\link{plot.default}}, \code{\link{image}} or \code{\link{hist}} 

    For \code{plot.deSolve}, the dots may contain other objects of class 
    \code{deSolve}, as returned by the integrators, and 
    to be plotted on the same graphs as \code{x}  - see second example.
    In this case, \code{x} and and these other objects should be compatible, 
    i.e. the names should be the same and they should have same number of rows.
    
    For \code{plot.deSolve}, the arguments after \ldots must be matched exactly.     
  } 
}

\details{
  The number of panels per page is automatically determined up to 3 x 3
  (\code{par(mfrow = c(3, 3))}). This default can be overwritten by
  specifying user-defined settings for \code{mfrow} or \code{mfcol}.
  Set \code{mfrow} equal to \code{NULL} to avoid the plotting function to 
  change user-defined \code{mfrow} or \code{mfcol} settings.
  

  Other graphical parameters can be passed as well. Parameters
  \code{xlab} and \code{ylab} are vectorized, so it is possible to
  assign specific axis labels to individual plots.
  
  Image plots will only work for 1-D and 2-D variables, as solved with
  \code{\link{ode.1D}} and \code{\link{ode.2D}}. In the first case, an
  image with \code{times} as x- and \code{the grid} as y-axis will be
  created.  in second case, an x-y plot will be created, for all
  times. Unless \code{ask = FALSE}, the user will be asked to confirm
  page changes.  For images, it is possible to pass an argument
  \code{method} which can take the values "image" (default),
  "filled.contour", "contour" or "persp", in order to use the respective
  plotting method.
  
  \code{plot} will always have \code{times} on the x-axis. For problems
  solved with \code{ode.1D}, it may be more useful to use \code{plot.1D}
  which will plot how spatial variables change with time. These plots will
  have the \code{grid} on the x-axis.
}

\seealso{
 \code{\link{print.deSolve}}, \code{\link{ode}},  \code{\link{deSolve}}  
}
\examples{
## =======================================================================
## Example 1. A Predator-Prey model with 4 species in matrix formulation
## =======================================================================

LVmatrix <- function(t, n, parms) {
  with(parms, {
    dn <- r * n + n * (A \%*\% n)
    return(list(c(dn)))
  })
}
parms <- list(
  r = c(r1 = 0.1, r2 = 0.1, r3 = -0.1, r4 = -0.1),
  A = matrix(c(0.0, 0.0, -0.2, 0.01,      # prey 1
               0.0, 0.0, 0.02, -0.1,      # prey 2
               0.2, 0.02, 0.0, 0.0,       # predator 1; prefers prey 1
               0.01, 0.1, 0.0, 0.0),      # predator 2; prefers prey 2
               nrow = 4, ncol = 4, byrow=TRUE)
)
times <- seq(from = 0, to = 500, by = 0.1)
y     <- c(prey1 = 1, prey2 = 1, pred1 = 2, pred2 = 2)

out <- ode(y, times, LVmatrix, parms)

## Basic line plot
plot(out, type = "l")

## User-specified axis labels
plot(out, type = "l", ylab = c("Prey 1", "Prey 2", "Pred 1", "Pred 2"),
  xlab = "Time (d)", main = "Time Series") 

## Set user-defined mfrow
pm <- par (mfrow = c(2, 2))

## "mfrow=NULL" keeps user-defined mfrow
plot(out, which = c("prey1", "pred2"), mfrow = NULL, type = "l", lwd = 2)

plot(out[,"prey1"], out[,"pred1"], xlab="prey1", 
  ylab = "pred1", type = "l", lwd = 2)
plot(out[,"prey2"], out[,"pred2"], xlab = "prey2", 
  ylab = "pred2", type = "l",lwd = 2)

## restore graphics parameters
par ("mfrow" = pm)


## =======================================================================
## Example 2. Add second and third output, and observations
## =======================================================================

# New runs with different parameter settings
parms2      <- parms
parms2$r[1] <- 0.2
out2 <- ode(y, times, LVmatrix, parms2)

# New runs with different parameter settings
parms3      <- parms
parms3$r[1] <- 0.05
out3 <- ode(y, times, LVmatrix, parms3)

# plot all three outputs
plot(out, out2, out3, type = "l", 
  ylab = c("Prey 1", "Prey 2", "Pred 1", "Pred 2"),
  xlab = "Time (d)", main = "Time Series", 
  col = c("red", "blue", "darkred")) 


## 'observed' data
obs <- matrix (ncol = 3, 
              data = c(seq(10, 1000, by = 100),
                       rep(0.1, 10), rep (1.0, 10)))
colnames(obs) <- c("time", "prey1", "prey2")

plot(out, which = "prey1", type = "l", obs = obs, 
     obspar = list(pch = 18, cex = 2))

plot(out, type = "l", obs = obs, col = "red")

# Simple histogram
hist(out, col = "darkblue", breaks = 50)

# different parameters per plot
hist(out, col = c("darkblue","red", "orange", "black"), 
     breaks = c(10,50))

## =======================================================================
## The Aphid model from Soetaert and Herman, 2009.
## A practical guide to ecological modelling.
## Using R as a simulation platform. Springer.
## =======================================================================

## 1-D diffusion model

## ================
## Model equations
## ================
Aphid <- function(t, APHIDS, parameters) {
  deltax  <- c (0.5, rep(1, numboxes - 1), 0.5)
  Flux    <- -D * diff(c(0, APHIDS, 0))/deltax
  dAPHIDS <- -diff(Flux)/delx + APHIDS * r
  list(dAPHIDS)
}
  
## ==================
## Model application
## ==================

## the model parameters:
D         <- 0.3    # m2/day  diffusion rate
r         <- 0.01   # /day    net growth rate
delx      <- 1      # m       thickness of boxes
numboxes  <- 60 

## distance of boxes on plant, m, 1 m intervals
Distance  <- seq(from = 0.5, by = delx, length.out = numboxes)

## Initial conditions, ind/m2
## aphids present only on two central boxes
APHIDS        <- rep(0, times = numboxes)
APHIDS[30:31] <- 1
state         <- c(APHIDS = APHIDS)      # initialise state variables 
                  
## RUNNING the model:
times <- seq(0, 200, by = 1)   # output wanted at these time intervals
out   <- ode.1D(state, times, Aphid, parms = 0, nspec = 1)

image(out, grid = Distance, main = "Aphid model", ylab = "distance, m")

image(out, grid = Distance, main = "Aphid model", ylab = "distance, m", 
  method = "persp", border = NA, theta = 30)
\dontrun{
  plot(out,ask = FALSE, mfrow = c(1, 1))
  plot.1D(out, ask = FALSE, type = "l", lwd = 2, xyswap = TRUE)
}
}

\keyword{ hplot }

