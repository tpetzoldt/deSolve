deSolve release 2.0

** done **
- code + doc for temporal interpolation in C and Fortran
- linear + constant interpolation
- interpolation options in a list - avoids growth of arguments..
  AND assure backward compatibility
- explain forcing options in compiledCode vignette
- Update vignette with diagnostics example
- S3 classes for deSolve output  (deSolve = class of differential equation)
- print and plot method for deSolve output (in file utilities.R)
- improve diagnostics for all    (note: NO S3 classes needed...)
- forcing functions for rk solvers
- simple PID stepsize control (not really important for our testcases)

** in progress **
- make help files more readable
   * removed istate and rstate description from Rd files
     -> now in a TABLE in vignette - but still needs to be checked

** to decide **
do we need:
- ? root extraction for lsodar or is "attributes(out)$iroot" enough?
  -> T.P., yes, we need a small function (or a specific print)
- ? istate and rstate extraction for all?  or "attributes(out)$istate"?
  -> T.P.: what do you mean? We already have diagnostics. If this is
     not enough for you: write two functions istate() and rstate()
- ? write a plot.ode function ? (~ as in FME), multiple figures on a
   window
  -> TP: Not sure. Con: There are already many examples in the docs. 
    Pro: My students loose most of their time in R with plotting issues.


** To do **
- make possible to use banded solvers with compiled code (now only lsodes) KS
- more diagnostics for rk  - ThPe
- unscramble output names in case 1-D model (see example Thomas !) - KS
  ThPe: ??? I have not found anything problematic, what have I missed?

** Wishlist **
- forcings and initfunc for R models too. -
  KS: difficult - what is the best strategy ?
    * compatible to forcing functions in DLL
    * compatible to approxfun, but not using bisectioning
  TP: suggestion 1: write a wrapper, similar to the func but with
    the approx stuff outside; this then calls func
  suggestion 2: give "initforc" the option to set forcings with an R function
    and then interpolate this behind the scene with the C
    functionality
  suggestion 3: leave it as is and provide a special approxSeq, based
    on your existing sequentially interpolating C function.
    This is IMHO the simplest method to understand for our students.

